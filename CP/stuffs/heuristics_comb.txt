solve :: int_search(x, input_order, indomain_min)  minimize max(y);
solve :: int_search(x, input_order, indomain_max)  minimize max(y);
solve :: int_search(x, input_order, indomain_middle)  minimize max(y);
solve :: int_search(x, input_order, indomain_median)  minimize max(y);
solve :: int_search(x, input_order, indomain)  minimize max(y);
solve :: int_search(x, input_order, indomain_random)  minimize max(y);
solve :: int_search(x, input_order, indomain_split)  minimize max(y);
solve :: int_search(x, input_order, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, input_order, indomain_interval)  minimize max(y);
solve :: int_search(x, first_fail, indomain_min)  minimize max(y);
solve :: int_search(x, first_fail, indomain_max)  minimize max(y);
solve :: int_search(x, first_fail, indomain_middle)  minimize max(y);
solve :: int_search(x, first_fail, indomain_median)  minimize max(y);
solve :: int_search(x, first_fail, indomain)  minimize max(y);
solve :: int_search(x, first_fail, indomain_random)  minimize max(y);
solve :: int_search(x, first_fail, indomain_split)  minimize max(y);
solve :: int_search(x, first_fail, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, first_fail, indomain_interval)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_min)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_max)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_middle)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_median)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_random)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_split)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, anti_first_fail, indomain_interval)  minimize max(y);
solve :: int_search(x, smallest, indomain_min)  minimize max(y);
solve :: int_search(x, smallest, indomain_max)  minimize max(y);
solve :: int_search(x, smallest, indomain_middle)  minimize max(y);
solve :: int_search(x, smallest, indomain_median)  minimize max(y);
solve :: int_search(x, smallest, indomain)  minimize max(y);
solve :: int_search(x, smallest, indomain_random)  minimize max(y);
solve :: int_search(x, smallest, indomain_split)  minimize max(y);
solve :: int_search(x, smallest, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, smallest, indomain_interval)  minimize max(y);
solve :: int_search(x, largest, indomain_min)  minimize max(y);
solve :: int_search(x, largest, indomain_max)  minimize max(y);
solve :: int_search(x, largest, indomain_middle)  minimize max(y);
solve :: int_search(x, largest, indomain_median)  minimize max(y);
solve :: int_search(x, largest, indomain)  minimize max(y);
solve :: int_search(x, largest, indomain_random)  minimize max(y);
solve :: int_search(x, largest, indomain_split)  minimize max(y);
solve :: int_search(x, largest, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, largest, indomain_interval)  minimize max(y);
solve :: int_search(x, occurrence, indomain_min)  minimize max(y);
solve :: int_search(x, occurrence, indomain_max)  minimize max(y);
solve :: int_search(x, occurrence, indomain_middle)  minimize max(y);
solve :: int_search(x, occurrence, indomain_median)  minimize max(y);
solve :: int_search(x, occurrence, indomain)  minimize max(y);
solve :: int_search(x, occurrence, indomain_random)  minimize max(y);
solve :: int_search(x, occurrence, indomain_split)  minimize max(y);
solve :: int_search(x, occurrence, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, occurrence, indomain_interval)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_min)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_max)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_middle)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_median)  minimize max(y);
solve :: int_search(x, most_constrained, indomain)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_random)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_split)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, most_constrained, indomain_interval)  minimize max(y);
solve :: int_search(x, max_regret, indomain_min)  minimize max(y);
solve :: int_search(x, max_regret, indomain_max)  minimize max(y);
solve :: int_search(x, max_regret, indomain_middle)  minimize max(y);
solve :: int_search(x, max_regret, indomain_median)  minimize max(y);
solve :: int_search(x, max_regret, indomain)  minimize max(y);
solve :: int_search(x, max_regret, indomain_random)  minimize max(y);
solve :: int_search(x, max_regret, indomain_split)  minimize max(y);
solve :: int_search(x, max_regret, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, max_regret, indomain_interval)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_min)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_max)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_middle)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_median)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_random)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_split)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_reverse_split)  minimize max(y);
solve :: int_search(x, dom_w_deg, indomain_interval)  minimize max(y);
